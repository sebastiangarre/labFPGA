// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/06/2024 18:54:44"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Restador_Completo_4b
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Restador_Completo_4b_vlg_sample_tst(
	a0,
	a1,
	a2,
	a3,
	b0,
	b1,
	b2,
	b3,
	bin,
	CLOCK,
	sampler_tx
);
input  a0;
input  a1;
input  a2;
input  a3;
input  b0;
input  b1;
input  b2;
input  b3;
input  bin;
input  CLOCK;
output sampler_tx;

reg sample;
time current_time;
always @(a0 or a1 or a2 or a3 or b0 or b1 or b2 or b3 or bin or CLOCK)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Restador_Completo_4b_vlg_check_tst (
	bout,
	z0,
	z1,
	z2,
	z3,
	sampler_rx
);
input  bout;
input  z0;
input  z1;
input  z2;
input  z3;
input sampler_rx;

reg  bout_expected;
reg  z0_expected;
reg  z1_expected;
reg  z2_expected;
reg  z3_expected;

reg  bout_prev;
reg  z0_prev;
reg  z1_prev;
reg  z2_prev;
reg  z3_prev;

reg  bout_expected_prev;
reg  z0_expected_prev;
reg  z1_expected_prev;
reg  z2_expected_prev;
reg  z3_expected_prev;

reg  last_bout_exp;
reg  last_z0_exp;
reg  last_z1_exp;
reg  last_z2_exp;
reg  last_z3_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	bout_prev = bout;
	z0_prev = z0;
	z1_prev = z1;
	z2_prev = z2;
	z3_prev = z3;
end

// update expected /o prevs

always @(trigger)
begin
	bout_expected_prev = bout_expected;
	z0_expected_prev = z0_expected;
	z1_expected_prev = z1_expected;
	z2_expected_prev = z2_expected;
	z3_expected_prev = z3_expected;
end



// expected bout
initial
begin
	bout_expected = 1'bX;
end 

// expected z0
initial
begin
	z0_expected = 1'bX;
end 

// expected z1
initial
begin
	z1_expected = 1'bX;
end 

// expected z2
initial
begin
	z2_expected = 1'bX;
end 

// expected z3
initial
begin
	z3_expected = 1'bX;
end 
// generate trigger
always @(bout_expected or bout or z0_expected or z0 or z1_expected or z1 or z2_expected or z2 or z3_expected or z3)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected bout = %b | expected z0 = %b | expected z1 = %b | expected z2 = %b | expected z3 = %b | ",bout_expected_prev,z0_expected_prev,z1_expected_prev,z2_expected_prev,z3_expected_prev);
	$display("| real bout = %b | real z0 = %b | real z1 = %b | real z2 = %b | real z3 = %b | ",bout_prev,z0_prev,z1_prev,z2_prev,z3_prev);
`endif
	if (
		( bout_expected_prev !== 1'bx ) && ( bout_prev !== bout_expected_prev )
		&& ((bout_expected_prev !== last_bout_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bout :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bout_expected_prev);
		$display ("     Real value = %b", bout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_bout_exp = bout_expected_prev;
	end
	if (
		( z0_expected_prev !== 1'bx ) && ( z0_prev !== z0_expected_prev )
		&& ((z0_expected_prev !== last_z0_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port z0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", z0_expected_prev);
		$display ("     Real value = %b", z0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_z0_exp = z0_expected_prev;
	end
	if (
		( z1_expected_prev !== 1'bx ) && ( z1_prev !== z1_expected_prev )
		&& ((z1_expected_prev !== last_z1_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port z1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", z1_expected_prev);
		$display ("     Real value = %b", z1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_z1_exp = z1_expected_prev;
	end
	if (
		( z2_expected_prev !== 1'bx ) && ( z2_prev !== z2_expected_prev )
		&& ((z2_expected_prev !== last_z2_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port z2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", z2_expected_prev);
		$display ("     Real value = %b", z2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_z2_exp = z2_expected_prev;
	end
	if (
		( z3_expected_prev !== 1'bx ) && ( z3_prev !== z3_expected_prev )
		&& ((z3_expected_prev !== last_z3_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port z3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", z3_expected_prev);
		$display ("     Real value = %b", z3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_z3_exp = z3_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Restador_Completo_4b_vlg_vec_tst();
// constants                                           
// general purpose registers
reg a0;
reg a1;
reg a2;
reg a3;
reg b0;
reg b1;
reg b2;
reg b3;
reg bin;
reg CLOCK;
// wires                                               
wire bout;
wire z0;
wire z1;
wire z2;
wire z3;

wire sampler;                             

// assign statements (if any)                          
Restador_Completo_4b i1 (
// port map - connection between master ports and signals/registers   
	.a0(a0),
	.a1(a1),
	.a2(a2),
	.a3(a3),
	.b0(b0),
	.b1(b1),
	.b2(b2),
	.b3(b3),
	.bin(bin),
	.bout(bout),
	.CLOCK(CLOCK),
	.z0(z0),
	.z1(z1),
	.z2(z2),
	.z3(z3)
);

// a0
initial
begin
	a0 = 1'b1;
	a0 = #10000 1'b0;
	a0 = #5000 1'b1;
	a0 = #5000 1'b0;
	a0 = #5000 1'b1;
	a0 = #5000 1'b0;
	a0 = #5000 1'b1;
	a0 = #15000 1'b0;
	a0 = #10000 1'b1;
	a0 = #10000 1'b0;
	a0 = #5000 1'b1;
	a0 = #5000 1'b0;
	a0 = #15000 1'b1;
	a0 = #5000 1'b0;
	a0 = #20000 1'b1;
	a0 = #10000 1'b0;
	a0 = #5000 1'b1;
	a0 = #5000 1'b0;
	a0 = #5000 1'b1;
	a0 = #5000 1'b0;
	a0 = #5000 1'b1;
	a0 = #15000 1'b0;
	a0 = #15000 1'b1;
	a0 = #5000 1'b0;
	a0 = #5000 1'b1;
	a0 = #10000 1'b0;
	a0 = #10000 1'b1;
	a0 = #20000 1'b0;
	a0 = #5000 1'b1;
	a0 = #5000 1'b0;
	a0 = #10000 1'b1;
	a0 = #10000 1'b0;
	a0 = #5000 1'b1;
	a0 = #30000 1'b0;
	a0 = #15000 1'b1;
	a0 = #10000 1'b0;
	a0 = #25000 1'b1;
	a0 = #5000 1'b0;
	a0 = #5000 1'b1;
	a0 = #10000 1'b0;
	a0 = #15000 1'b1;
	a0 = #15000 1'b0;
	a0 = #15000 1'b1;
	a0 = #15000 1'b0;
	a0 = #5000 1'b1;
	a0 = #10000 1'b0;
	a0 = #15000 1'b1;
	a0 = #5000 1'b0;
	a0 = #5000 1'b1;
	a0 = #20000 1'b0;
	a0 = #5000 1'b1;
	a0 = #20000 1'b0;
	a0 = #5000 1'b1;
	a0 = #10000 1'b0;
	a0 = #5000 1'b1;
	a0 = #5000 1'b0;
	a0 = #10000 1'b1;
	a0 = #5000 1'b0;
	a0 = #15000 1'b1;
	a0 = #5000 1'b0;
	a0 = #5000 1'b1;
	a0 = #15000 1'b0;
	a0 = #5000 1'b1;
	a0 = #15000 1'b0;
	a0 = #5000 1'b1;
	a0 = #15000 1'b0;
	a0 = #10000 1'b1;
	a0 = #50000 1'b0;
	a0 = #10000 1'b1;
	a0 = #10000 1'b0;
	a0 = #5000 1'b1;
	a0 = #10000 1'b0;
	a0 = #5000 1'b1;
	a0 = #15000 1'b0;
	a0 = #10000 1'b1;
	a0 = #5000 1'b0;
	a0 = #5000 1'b1;
	a0 = #10000 1'b0;
	a0 = #20000 1'b1;
	a0 = #5000 1'b0;
	a0 = #10000 1'b1;
	a0 = #5000 1'b0;
	a0 = #5000 1'b1;
	a0 = #5000 1'b0;
	a0 = #5000 1'b1;
	a0 = #15000 1'b0;
	a0 = #10000 1'b1;
	a0 = #5000 1'b0;
	a0 = #10000 1'b1;
	a0 = #20000 1'b0;
	a0 = #5000 1'b1;
	a0 = #15000 1'b0;
	a0 = #15000 1'b1;
	a0 = #10000 1'b0;
	a0 = #10000 1'b1;
	a0 = #5000 1'b0;
	a0 = #5000 1'b1;
	a0 = #10000 1'b0;
	a0 = #5000 1'b1;
	a0 = #5000 1'b0;
	a0 = #15000 1'b1;
end 

// a1
initial
begin
	a1 = 1'b0;
	a1 = #10000 1'b1;
	a1 = #5000 1'b0;
	a1 = #30000 1'b1;
	a1 = #15000 1'b0;
	a1 = #5000 1'b1;
	a1 = #15000 1'b0;
	a1 = #25000 1'b1;
	a1 = #5000 1'b0;
	a1 = #10000 1'b1;
	a1 = #5000 1'b0;
	a1 = #5000 1'b1;
	a1 = #15000 1'b0;
	a1 = #15000 1'b1;
	a1 = #10000 1'b0;
	a1 = #5000 1'b1;
	a1 = #5000 1'b0;
	a1 = #15000 1'b1;
	a1 = #5000 1'b0;
	a1 = #15000 1'b1;
	a1 = #5000 1'b0;
	a1 = #5000 1'b1;
	a1 = #25000 1'b0;
	a1 = #10000 1'b1;
	a1 = #5000 1'b0;
	a1 = #20000 1'b1;
	a1 = #10000 1'b0;
	a1 = #5000 1'b1;
	a1 = #10000 1'b0;
	a1 = #5000 1'b1;
	a1 = #5000 1'b0;
	a1 = #20000 1'b1;
	a1 = #5000 1'b0;
	a1 = #5000 1'b1;
	a1 = #5000 1'b0;
	a1 = #10000 1'b1;
	a1 = #5000 1'b0;
	a1 = #5000 1'b1;
	a1 = #5000 1'b0;
	a1 = #20000 1'b1;
	a1 = #5000 1'b0;
	a1 = #15000 1'b1;
	a1 = #15000 1'b0;
	a1 = #15000 1'b1;
	a1 = #25000 1'b0;
	a1 = #15000 1'b1;
	a1 = #10000 1'b0;
	a1 = #5000 1'b1;
	a1 = #5000 1'b0;
	a1 = #10000 1'b1;
	a1 = #15000 1'b0;
	a1 = #5000 1'b1;
	a1 = #10000 1'b0;
	a1 = #10000 1'b1;
	a1 = #5000 1'b0;
	a1 = #15000 1'b1;
	a1 = #5000 1'b0;
	a1 = #5000 1'b1;
	a1 = #10000 1'b0;
	a1 = #30000 1'b1;
	a1 = #5000 1'b0;
	a1 = #5000 1'b1;
	a1 = #10000 1'b0;
	a1 = #5000 1'b1;
	a1 = #15000 1'b0;
	a1 = #10000 1'b1;
	a1 = #15000 1'b0;
	a1 = #10000 1'b1;
	a1 = #15000 1'b0;
	a1 = #10000 1'b1;
	a1 = #5000 1'b0;
	a1 = #5000 1'b1;
	a1 = #5000 1'b0;
	a1 = #5000 1'b1;
	a1 = #30000 1'b0;
	a1 = #15000 1'b1;
	a1 = #5000 1'b0;
	a1 = #10000 1'b1;
	a1 = #35000 1'b0;
	a1 = #5000 1'b1;
	a1 = #10000 1'b0;
	a1 = #15000 1'b1;
	a1 = #10000 1'b0;
	a1 = #5000 1'b1;
	a1 = #10000 1'b0;
	a1 = #5000 1'b1;
	a1 = #5000 1'b0;
	a1 = #15000 1'b1;
	a1 = #5000 1'b0;
	a1 = #5000 1'b1;
	a1 = #10000 1'b0;
	a1 = #5000 1'b1;
	a1 = #10000 1'b0;
	a1 = #5000 1'b1;
	a1 = #20000 1'b0;
	a1 = #5000 1'b1;
end 

// a2
initial
begin
	a2 = 1'b0;
	a2 = #5000 1'b1;
	a2 = #10000 1'b0;
	a2 = #5000 1'b1;
	a2 = #5000 1'b0;
	a2 = #15000 1'b1;
	a2 = #5000 1'b0;
	a2 = #5000 1'b1;
	a2 = #15000 1'b0;
	a2 = #15000 1'b1;
	a2 = #5000 1'b0;
	a2 = #10000 1'b1;
	a2 = #10000 1'b0;
	a2 = #5000 1'b1;
	a2 = #5000 1'b0;
	a2 = #5000 1'b1;
	a2 = #5000 1'b0;
	a2 = #5000 1'b1;
	a2 = #5000 1'b0;
	a2 = #5000 1'b1;
	a2 = #5000 1'b0;
	a2 = #10000 1'b1;
	a2 = #15000 1'b0;
	a2 = #15000 1'b1;
	a2 = #15000 1'b0;
	a2 = #10000 1'b1;
	a2 = #5000 1'b0;
	a2 = #5000 1'b1;
	a2 = #10000 1'b0;
	a2 = #5000 1'b1;
	a2 = #15000 1'b0;
	a2 = #5000 1'b1;
	a2 = #5000 1'b0;
	a2 = #25000 1'b1;
	a2 = #5000 1'b0;
	a2 = #5000 1'b1;
	a2 = #5000 1'b0;
	a2 = #5000 1'b1;
	a2 = #5000 1'b0;
	a2 = #5000 1'b1;
	a2 = #10000 1'b0;
	a2 = #10000 1'b1;
	a2 = #15000 1'b0;
	a2 = #10000 1'b1;
	a2 = #15000 1'b0;
	a2 = #5000 1'b1;
	a2 = #5000 1'b0;
	a2 = #10000 1'b1;
	a2 = #5000 1'b0;
	a2 = #5000 1'b1;
	a2 = #15000 1'b0;
	a2 = #5000 1'b1;
	a2 = #5000 1'b0;
	a2 = #10000 1'b1;
	a2 = #5000 1'b0;
	a2 = #10000 1'b1;
	a2 = #15000 1'b0;
	a2 = #10000 1'b1;
	a2 = #25000 1'b0;
	a2 = #5000 1'b1;
	a2 = #15000 1'b0;
	a2 = #20000 1'b1;
	a2 = #5000 1'b0;
	a2 = #5000 1'b1;
	a2 = #5000 1'b0;
	a2 = #5000 1'b1;
	a2 = #5000 1'b0;
	a2 = #20000 1'b1;
	a2 = #5000 1'b0;
	a2 = #10000 1'b1;
	a2 = #20000 1'b0;
	a2 = #5000 1'b1;
	a2 = #15000 1'b0;
	a2 = #5000 1'b1;
	a2 = #15000 1'b0;
	a2 = #5000 1'b1;
	a2 = #20000 1'b0;
	a2 = #10000 1'b1;
	a2 = #5000 1'b0;
	a2 = #10000 1'b1;
	a2 = #5000 1'b0;
	a2 = #10000 1'b1;
	a2 = #5000 1'b0;
	a2 = #25000 1'b1;
	a2 = #5000 1'b0;
	a2 = #5000 1'b1;
	a2 = #5000 1'b0;
	a2 = #5000 1'b1;
	a2 = #5000 1'b0;
	a2 = #5000 1'b1;
	a2 = #10000 1'b0;
	a2 = #10000 1'b1;
	a2 = #10000 1'b0;
	a2 = #5000 1'b1;
	a2 = #5000 1'b0;
	a2 = #10000 1'b1;
	a2 = #20000 1'b0;
	a2 = #5000 1'b1;
	a2 = #5000 1'b0;
	a2 = #10000 1'b1;
	a2 = #5000 1'b0;
	a2 = #10000 1'b1;
	a2 = #10000 1'b0;
	a2 = #5000 1'b1;
	a2 = #5000 1'b0;
	a2 = #10000 1'b1;
	a2 = #5000 1'b0;
	a2 = #5000 1'b1;
	a2 = #5000 1'b0;
	a2 = #5000 1'b1;
	a2 = #5000 1'b0;
	a2 = #5000 1'b1;
	a2 = #30000 1'b0;
	a2 = #10000 1'b1;
end 

// a3
initial
begin
	a3 = 1'b0;
	a3 = #15000 1'b1;
	a3 = #5000 1'b0;
	a3 = #5000 1'b1;
	a3 = #5000 1'b0;
	a3 = #5000 1'b1;
	a3 = #5000 1'b0;
	a3 = #5000 1'b1;
	a3 = #10000 1'b0;
	a3 = #5000 1'b1;
	a3 = #5000 1'b0;
	a3 = #10000 1'b1;
	a3 = #25000 1'b0;
	a3 = #15000 1'b1;
	a3 = #20000 1'b0;
	a3 = #15000 1'b1;
	a3 = #10000 1'b0;
	a3 = #10000 1'b1;
	a3 = #10000 1'b0;
	a3 = #15000 1'b1;
	a3 = #15000 1'b0;
	a3 = #5000 1'b1;
	a3 = #5000 1'b0;
	a3 = #10000 1'b1;
	a3 = #5000 1'b0;
	a3 = #5000 1'b1;
	a3 = #5000 1'b0;
	a3 = #5000 1'b1;
	a3 = #15000 1'b0;
	a3 = #5000 1'b1;
	a3 = #10000 1'b0;
	a3 = #15000 1'b1;
	a3 = #5000 1'b0;
	a3 = #25000 1'b1;
	a3 = #10000 1'b0;
	a3 = #10000 1'b1;
	a3 = #25000 1'b0;
	a3 = #15000 1'b1;
	a3 = #5000 1'b0;
	a3 = #20000 1'b1;
	a3 = #5000 1'b0;
	a3 = #50000 1'b1;
	a3 = #5000 1'b0;
	a3 = #5000 1'b1;
	a3 = #10000 1'b0;
	a3 = #5000 1'b1;
	a3 = #5000 1'b0;
	a3 = #10000 1'b1;
	a3 = #20000 1'b0;
	a3 = #5000 1'b1;
	a3 = #15000 1'b0;
	a3 = #5000 1'b1;
	a3 = #15000 1'b0;
	a3 = #5000 1'b1;
	a3 = #10000 1'b0;
	a3 = #5000 1'b1;
	a3 = #5000 1'b0;
	a3 = #15000 1'b1;
	a3 = #5000 1'b0;
	a3 = #5000 1'b1;
	a3 = #5000 1'b0;
	a3 = #5000 1'b1;
	a3 = #10000 1'b0;
	a3 = #5000 1'b1;
	a3 = #10000 1'b0;
	a3 = #10000 1'b1;
	a3 = #10000 1'b0;
	a3 = #5000 1'b1;
	a3 = #5000 1'b0;
	a3 = #5000 1'b1;
	a3 = #10000 1'b0;
	a3 = #5000 1'b1;
	a3 = #5000 1'b0;
	a3 = #5000 1'b1;
	a3 = #10000 1'b0;
	a3 = #5000 1'b1;
	a3 = #25000 1'b0;
	a3 = #5000 1'b1;
	a3 = #5000 1'b0;
	a3 = #5000 1'b1;
	a3 = #10000 1'b0;
	a3 = #5000 1'b1;
	a3 = #5000 1'b0;
	a3 = #5000 1'b1;
	a3 = #10000 1'b0;
	a3 = #5000 1'b1;
	a3 = #5000 1'b0;
	a3 = #5000 1'b1;
	a3 = #5000 1'b0;
	a3 = #15000 1'b1;
	a3 = #25000 1'b0;
	a3 = #20000 1'b1;
	a3 = #5000 1'b0;
	a3 = #5000 1'b1;
	a3 = #5000 1'b0;
	a3 = #5000 1'b1;
	a3 = #10000 1'b0;
	a3 = #5000 1'b1;
	a3 = #5000 1'b0;
	a3 = #5000 1'b1;
	a3 = #5000 1'b0;
	a3 = #5000 1'b1;
	a3 = #15000 1'b0;
	a3 = #20000 1'b1;
end 

// b0
initial
begin
	b0 = 1'b0;
	b0 = #10000 1'b1;
	b0 = #5000 1'b0;
	b0 = #5000 1'b1;
	b0 = #10000 1'b0;
	b0 = #5000 1'b1;
	b0 = #5000 1'b0;
	b0 = #5000 1'b1;
	b0 = #35000 1'b0;
	b0 = #15000 1'b1;
	b0 = #15000 1'b0;
	b0 = #5000 1'b1;
	b0 = #10000 1'b0;
	b0 = #5000 1'b1;
	b0 = #20000 1'b0;
	b0 = #10000 1'b1;
	b0 = #10000 1'b0;
	b0 = #5000 1'b1;
	b0 = #5000 1'b0;
	b0 = #20000 1'b1;
	b0 = #10000 1'b0;
	b0 = #5000 1'b1;
	b0 = #5000 1'b0;
	b0 = #20000 1'b1;
	b0 = #15000 1'b0;
	b0 = #5000 1'b1;
	b0 = #40000 1'b0;
	b0 = #10000 1'b1;
	b0 = #5000 1'b0;
	b0 = #5000 1'b1;
	b0 = #5000 1'b0;
	b0 = #5000 1'b1;
	b0 = #20000 1'b0;
	b0 = #5000 1'b1;
	b0 = #5000 1'b0;
	b0 = #10000 1'b1;
	b0 = #5000 1'b0;
	b0 = #5000 1'b1;
	b0 = #10000 1'b0;
	b0 = #5000 1'b1;
	b0 = #20000 1'b0;
	b0 = #10000 1'b1;
	b0 = #10000 1'b0;
	b0 = #5000 1'b1;
	b0 = #5000 1'b0;
	b0 = #5000 1'b1;
	b0 = #10000 1'b0;
	b0 = #10000 1'b1;
	b0 = #20000 1'b0;
	b0 = #15000 1'b1;
	b0 = #5000 1'b0;
	b0 = #10000 1'b1;
	b0 = #10000 1'b0;
	b0 = #5000 1'b1;
	b0 = #5000 1'b0;
	b0 = #5000 1'b1;
	b0 = #5000 1'b0;
	b0 = #5000 1'b1;
	b0 = #10000 1'b0;
	b0 = #10000 1'b1;
	b0 = #15000 1'b0;
	b0 = #20000 1'b1;
	b0 = #10000 1'b0;
	b0 = #20000 1'b1;
	b0 = #5000 1'b0;
	b0 = #25000 1'b1;
	b0 = #5000 1'b0;
	b0 = #5000 1'b1;
	b0 = #5000 1'b0;
	b0 = #5000 1'b1;
	b0 = #5000 1'b0;
	b0 = #5000 1'b1;
	b0 = #10000 1'b0;
	b0 = #10000 1'b1;
	b0 = #5000 1'b0;
	b0 = #5000 1'b1;
	b0 = #15000 1'b0;
	b0 = #15000 1'b1;
	b0 = #5000 1'b0;
	b0 = #5000 1'b1;
	b0 = #15000 1'b0;
	b0 = #10000 1'b1;
	b0 = #5000 1'b0;
	b0 = #5000 1'b1;
	b0 = #10000 1'b0;
	b0 = #20000 1'b1;
	b0 = #35000 1'b0;
	b0 = #20000 1'b1;
	b0 = #10000 1'b0;
	b0 = #5000 1'b1;
	b0 = #10000 1'b0;
	b0 = #20000 1'b1;
	b0 = #5000 1'b0;
	b0 = #10000 1'b1;
	b0 = #5000 1'b0;
	b0 = #5000 1'b1;
	b0 = #5000 1'b0;
	b0 = #5000 1'b1;
	b0 = #5000 1'b0;
	b0 = #10000 1'b1;
	b0 = #5000 1'b0;
	b0 = #5000 1'b1;
end 

// b1
initial
begin
	b1 = 1'b1;
	b1 = #5000 1'b0;
	b1 = #5000 1'b1;
	b1 = #15000 1'b0;
	b1 = #10000 1'b1;
	b1 = #15000 1'b0;
	b1 = #10000 1'b1;
	b1 = #5000 1'b0;
	b1 = #35000 1'b1;
	b1 = #10000 1'b0;
	b1 = #5000 1'b1;
	b1 = #5000 1'b0;
	b1 = #5000 1'b1;
	b1 = #30000 1'b0;
	b1 = #10000 1'b1;
	b1 = #10000 1'b0;
	b1 = #5000 1'b1;
	b1 = #5000 1'b0;
	b1 = #10000 1'b1;
	b1 = #5000 1'b0;
	b1 = #10000 1'b1;
	b1 = #5000 1'b0;
	b1 = #10000 1'b1;
	b1 = #10000 1'b0;
	b1 = #5000 1'b1;
	b1 = #15000 1'b0;
	b1 = #15000 1'b1;
	b1 = #5000 1'b0;
	b1 = #5000 1'b1;
	b1 = #5000 1'b0;
	b1 = #5000 1'b1;
	b1 = #5000 1'b0;
	b1 = #5000 1'b1;
	b1 = #10000 1'b0;
	b1 = #5000 1'b1;
	b1 = #5000 1'b0;
	b1 = #5000 1'b1;
	b1 = #10000 1'b0;
	b1 = #5000 1'b1;
	b1 = #10000 1'b0;
	b1 = #20000 1'b1;
	b1 = #5000 1'b0;
	b1 = #10000 1'b1;
	b1 = #5000 1'b0;
	b1 = #5000 1'b1;
	b1 = #5000 1'b0;
	b1 = #20000 1'b1;
	b1 = #5000 1'b0;
	b1 = #10000 1'b1;
	b1 = #5000 1'b0;
	b1 = #5000 1'b1;
	b1 = #10000 1'b0;
	b1 = #5000 1'b1;
	b1 = #10000 1'b0;
	b1 = #5000 1'b1;
	b1 = #10000 1'b0;
	b1 = #5000 1'b1;
	b1 = #5000 1'b0;
	b1 = #5000 1'b1;
	b1 = #10000 1'b0;
	b1 = #5000 1'b1;
	b1 = #5000 1'b0;
	b1 = #5000 1'b1;
	b1 = #15000 1'b0;
	b1 = #5000 1'b1;
	b1 = #5000 1'b0;
	b1 = #5000 1'b1;
	b1 = #5000 1'b0;
	b1 = #5000 1'b1;
	b1 = #5000 1'b0;
	b1 = #5000 1'b1;
	b1 = #10000 1'b0;
	b1 = #15000 1'b1;
	b1 = #5000 1'b0;
	b1 = #5000 1'b1;
	b1 = #5000 1'b0;
	b1 = #20000 1'b1;
	b1 = #10000 1'b0;
	b1 = #25000 1'b1;
	b1 = #10000 1'b0;
	b1 = #5000 1'b1;
	b1 = #5000 1'b0;
	b1 = #5000 1'b1;
	b1 = #10000 1'b0;
	b1 = #10000 1'b1;
	b1 = #15000 1'b0;
	b1 = #30000 1'b1;
	b1 = #10000 1'b0;
	b1 = #5000 1'b1;
	b1 = #5000 1'b0;
	b1 = #5000 1'b1;
	b1 = #5000 1'b0;
	b1 = #5000 1'b1;
	b1 = #10000 1'b0;
	b1 = #5000 1'b1;
	b1 = #5000 1'b0;
	b1 = #10000 1'b1;
	b1 = #10000 1'b0;
	b1 = #5000 1'b1;
	b1 = #15000 1'b0;
	b1 = #5000 1'b1;
	b1 = #15000 1'b0;
	b1 = #20000 1'b1;
	b1 = #5000 1'b0;
	b1 = #10000 1'b1;
	b1 = #5000 1'b0;
	b1 = #10000 1'b1;
	b1 = #15000 1'b0;
	b1 = #5000 1'b1;
	b1 = #5000 1'b0;
	b1 = #10000 1'b1;
	b1 = #5000 1'b0;
	b1 = #15000 1'b1;
	b1 = #5000 1'b0;
	b1 = #5000 1'b1;
	b1 = #5000 1'b0;
end 

// b2
initial
begin
	b2 = 1'b0;
	b2 = #10000 1'b1;
	b2 = #5000 1'b0;
	b2 = #25000 1'b1;
	b2 = #5000 1'b0;
	b2 = #5000 1'b1;
	b2 = #5000 1'b0;
	b2 = #15000 1'b1;
	b2 = #5000 1'b0;
	b2 = #5000 1'b1;
	b2 = #10000 1'b0;
	b2 = #10000 1'b1;
	b2 = #5000 1'b0;
	b2 = #5000 1'b1;
	b2 = #15000 1'b0;
	b2 = #5000 1'b1;
	b2 = #15000 1'b0;
	b2 = #5000 1'b1;
	b2 = #10000 1'b0;
	b2 = #10000 1'b1;
	b2 = #5000 1'b0;
	b2 = #5000 1'b1;
	b2 = #5000 1'b0;
	b2 = #10000 1'b1;
	b2 = #10000 1'b0;
	b2 = #5000 1'b1;
	b2 = #5000 1'b0;
	b2 = #10000 1'b1;
	b2 = #5000 1'b0;
	b2 = #10000 1'b1;
	b2 = #5000 1'b0;
	b2 = #10000 1'b1;
	b2 = #25000 1'b0;
	b2 = #5000 1'b1;
	b2 = #40000 1'b0;
	b2 = #5000 1'b1;
	b2 = #25000 1'b0;
	b2 = #5000 1'b1;
	b2 = #5000 1'b0;
	b2 = #10000 1'b1;
	b2 = #5000 1'b0;
	b2 = #5000 1'b1;
	b2 = #10000 1'b0;
	b2 = #5000 1'b1;
	b2 = #5000 1'b0;
	b2 = #20000 1'b1;
	b2 = #5000 1'b0;
	b2 = #20000 1'b1;
	b2 = #20000 1'b0;
	b2 = #10000 1'b1;
	b2 = #5000 1'b0;
	b2 = #15000 1'b1;
	b2 = #5000 1'b0;
	b2 = #35000 1'b1;
	b2 = #10000 1'b0;
	b2 = #5000 1'b1;
	b2 = #10000 1'b0;
	b2 = #15000 1'b1;
	b2 = #5000 1'b0;
	b2 = #10000 1'b1;
	b2 = #5000 1'b0;
	b2 = #5000 1'b1;
	b2 = #5000 1'b0;
	b2 = #25000 1'b1;
	b2 = #5000 1'b0;
	b2 = #25000 1'b1;
	b2 = #10000 1'b0;
	b2 = #5000 1'b1;
	b2 = #5000 1'b0;
	b2 = #15000 1'b1;
	b2 = #15000 1'b0;
	b2 = #5000 1'b1;
	b2 = #5000 1'b0;
	b2 = #5000 1'b1;
	b2 = #5000 1'b0;
	b2 = #5000 1'b1;
	b2 = #5000 1'b0;
	b2 = #5000 1'b1;
	b2 = #15000 1'b0;
	b2 = #5000 1'b1;
	b2 = #10000 1'b0;
	b2 = #10000 1'b1;
	b2 = #5000 1'b0;
	b2 = #5000 1'b1;
	b2 = #20000 1'b0;
	b2 = #15000 1'b1;
	b2 = #5000 1'b0;
	b2 = #5000 1'b1;
	b2 = #5000 1'b0;
	b2 = #5000 1'b1;
	b2 = #5000 1'b0;
	b2 = #5000 1'b1;
	b2 = #10000 1'b0;
	b2 = #5000 1'b1;
	b2 = #10000 1'b0;
	b2 = #5000 1'b1;
	b2 = #15000 1'b0;
	b2 = #5000 1'b1;
	b2 = #5000 1'b0;
	b2 = #5000 1'b1;
	b2 = #5000 1'b0;
	b2 = #5000 1'b1;
	b2 = #5000 1'b0;
	b2 = #5000 1'b1;
	b2 = #5000 1'b0;
	b2 = #10000 1'b1;
	b2 = #10000 1'b0;
	b2 = #10000 1'b1;
	b2 = #10000 1'b0;
end 

// b3
initial
begin
	b3 = 1'b0;
	b3 = #5000 1'b1;
	b3 = #10000 1'b0;
	b3 = #15000 1'b1;
	b3 = #5000 1'b0;
	b3 = #5000 1'b1;
	b3 = #5000 1'b0;
	b3 = #5000 1'b1;
	b3 = #10000 1'b0;
	b3 = #10000 1'b1;
	b3 = #5000 1'b0;
	b3 = #5000 1'b1;
	b3 = #5000 1'b0;
	b3 = #10000 1'b1;
	b3 = #20000 1'b0;
	b3 = #10000 1'b1;
	b3 = #5000 1'b0;
	b3 = #15000 1'b1;
	b3 = #5000 1'b0;
	b3 = #10000 1'b1;
	b3 = #10000 1'b0;
	b3 = #30000 1'b1;
	b3 = #5000 1'b0;
	b3 = #15000 1'b1;
	b3 = #15000 1'b0;
	b3 = #20000 1'b1;
	b3 = #10000 1'b0;
	b3 = #5000 1'b1;
	b3 = #5000 1'b0;
	b3 = #5000 1'b1;
	b3 = #5000 1'b0;
	b3 = #10000 1'b1;
	b3 = #5000 1'b0;
	b3 = #5000 1'b1;
	b3 = #5000 1'b0;
	b3 = #15000 1'b1;
	b3 = #10000 1'b0;
	b3 = #10000 1'b1;
	b3 = #10000 1'b0;
	b3 = #5000 1'b1;
	b3 = #5000 1'b0;
	b3 = #5000 1'b1;
	b3 = #15000 1'b0;
	b3 = #10000 1'b1;
	b3 = #10000 1'b0;
	b3 = #5000 1'b1;
	b3 = #10000 1'b0;
	b3 = #10000 1'b1;
	b3 = #5000 1'b0;
	b3 = #5000 1'b1;
	b3 = #5000 1'b0;
	b3 = #5000 1'b1;
	b3 = #5000 1'b0;
	b3 = #15000 1'b1;
	b3 = #5000 1'b0;
	b3 = #5000 1'b1;
	b3 = #10000 1'b0;
	b3 = #10000 1'b1;
	b3 = #10000 1'b0;
	b3 = #5000 1'b1;
	b3 = #5000 1'b0;
	b3 = #5000 1'b1;
	b3 = #5000 1'b0;
	b3 = #5000 1'b1;
	b3 = #10000 1'b0;
	b3 = #5000 1'b1;
	b3 = #15000 1'b0;
	b3 = #5000 1'b1;
	b3 = #5000 1'b0;
	b3 = #30000 1'b1;
	b3 = #10000 1'b0;
	b3 = #10000 1'b1;
	b3 = #15000 1'b0;
	b3 = #15000 1'b1;
	b3 = #5000 1'b0;
	b3 = #15000 1'b1;
	b3 = #5000 1'b0;
	b3 = #15000 1'b1;
	b3 = #25000 1'b0;
	b3 = #5000 1'b1;
	b3 = #10000 1'b0;
	b3 = #5000 1'b1;
	b3 = #15000 1'b0;
	b3 = #5000 1'b1;
	b3 = #15000 1'b0;
	b3 = #10000 1'b1;
	b3 = #10000 1'b0;
	b3 = #5000 1'b1;
	b3 = #5000 1'b0;
	b3 = #25000 1'b1;
	b3 = #10000 1'b0;
	b3 = #5000 1'b1;
	b3 = #5000 1'b0;
	b3 = #5000 1'b1;
	b3 = #10000 1'b0;
	b3 = #5000 1'b1;
	b3 = #5000 1'b0;
	b3 = #30000 1'b1;
	b3 = #15000 1'b0;
	b3 = #5000 1'b1;
	b3 = #5000 1'b0;
	b3 = #5000 1'b1;
	b3 = #10000 1'b0;
	b3 = #5000 1'b1;
	b3 = #5000 1'b0;
	b3 = #10000 1'b1;
	b3 = #5000 1'b0;
	b3 = #5000 1'b1;
	b3 = #5000 1'b0;
	b3 = #10000 1'b1;
end 

// bin
initial
begin
	bin = 1'b0;
end 

// CLOCK
always
begin
	CLOCK = 1'b0;
	CLOCK = #10000 1'b1;
	#10000;
end 

Restador_Completo_4b_vlg_sample_tst tb_sample (
	.a0(a0),
	.a1(a1),
	.a2(a2),
	.a3(a3),
	.b0(b0),
	.b1(b1),
	.b2(b2),
	.b3(b3),
	.bin(bin),
	.CLOCK(CLOCK),
	.sampler_tx(sampler)
);

Restador_Completo_4b_vlg_check_tst tb_out(
	.bout(bout),
	.z0(z0),
	.z1(z1),
	.z2(z2),
	.z3(z3),
	.sampler_rx(sampler)
);
endmodule

